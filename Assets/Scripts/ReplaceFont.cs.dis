using UnityEngine;
using System.Collections;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine.UI;

public class MyText : EditorWindow
{

    [MenuItem("Tools/替换字体")]
    public static void Open()
    {
        EditorWindow.GetWindow(typeof(MyText));
    }
    Font change;
    static Font changeFont;
    Font toChange;
    static Font toChangeFont;
    void OnGUI()
    {
        change = (Font)EditorGUILayout.ObjectField("目标字体", change, typeof(Font), true, GUILayout.MinWidth(100f));
        changeFont = change;
        toChange =
            (Font)EditorGUILayout.ObjectField("替换字体", toChange, typeof(Font), true, GUILayout.MinWidth(100f));
        toChangeFont = toChange;
        if (GUILayout.Button("替换"))
        {
            ChangeText();
        }
    }
    public static void ChangeText()
    {
        Transform canvas = GameObject.Find("UI Canvas").transform;
        if (!canvas)
        {
            Debug.Log("sence no canvas");
            return;
        }
        Transform[] tArray = canvas.GetComponentsInChildren<Transform>();
        for (int i = 0; i < tArray.Length; i++)
        {
            Text t = tArray[i].GetComponent<Text>();
            if (t)
            {
                Undo.RecordObject(t, t.gameObject.name);
                if (t.font == changeFont)
                {
                    t.font = toChangeFont;
                    EditorUtility.SetDirty(t);
                }
            }
        }
    }
}